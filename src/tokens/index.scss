////
/// Design Tokens
/// Autogenerated from tokens.json.
/// DO NOT EDIT!
////

@use "sass:list";
@use "sass:map";

$__token-values: (
  "color.brands.black": (
    default: (var(--color-brands-black)),
  ),
  "color.brands.pink": (
    default: (var(--color-brands-pink)),
  ),
  "color.brands.tan": (
    default: (var(--color-brands-tan)),
  ),
  "color.intercom-blue": (
    default: (var(--color-intercom-blue)),
  ),
  "color.loom-purple": (
    default: (var(--color-loom-purple)),
  ),
  "color.mode-green": (
    default: (var(--color-mode-green)),
  ),
  "ease.linear": (
    default: (var(--ease-linear)),
  ),
  "timing.quick": (
    default: (var(--timing-quick)),
  ),
  "timing.moderate": (
    default: (var(--timing-moderate)),
  ),
  "timing.deliberate": (
    default: (var(--timing-deliberate)),
  ),
  "timing.slow": (
    default: (var(--timing-slow)),
  ),
  "transition.linear-quick": (
    default: (var(--transition-linear-quick)),
  ),
  "transition.linear-moderate": (
    default: (var(--transition-linear-moderate)),
  ),
  "transition.linear-deliberate": (
    default: (var(--transition-linear-deliberate)),
  ),
  "transition.linear-slow": (
    default: (var(--transition-linear-slow)),
  ),
  "typography.base": (
    "__cobalt-error": "This is a typography mixin. Use `@include typography(\"typography.base\")` instead.",
  ),
  "typography.body": (
    "__cobalt-error": "This is a typography mixin. Use `@include typography(\"typography.body\")` instead.",
  ),
  "typography.caption": (
    "__cobalt-error": "This is a typography mixin. Use `@include typography(\"typography.caption\")` instead.",
  ),
  "typography.longform": (
    "__cobalt-error": "This is a typography mixin. Use `@include typography(\"typography.longform\")` instead.",
  ),
  "typography.heading": (
    "__cobalt-error": "This is a typography mixin. Use `@include typography(\"typography.heading\")` instead.",
  ),
  "typography.family.body": (
    default: (var(--typography-family-body)),
  ),
  "typography.family.heading": (
    default: (var(--typography-family-heading)),
  ),
);

$__token-typography-mixins: (
  "typography.base": (
    default: (
      "font-family": (var(--typography-base-font-family)),
      "font-size": (var(--typography-base-font-size)),
      "font-weight": (var(--typography-base-font-weight)),
      "line-height": (var(--typography-base-line-height)),
    ),
  ),
  "typography.body": (
    default: (
      "font-family": (var(--typography-body-font-family)),
      "font-size": (var(--typography-body-font-size)),
      "font-weight": (var(--typography-body-font-weight)),
      "line-height": (var(--typography-body-line-height)),
    ),
  ),
  "typography.caption": (
    default: (
      "font-family": (var(--typography-caption-font-family)),
      "font-sizes": (var(--typography-caption-font-sizes)),
      "font-weight": (var(--typography-caption-font-weight)),
      "letter-spacing": (var(--typography-caption-letter-spacing)),
      "line-height": (var(--typography-caption-line-height)),
    ),
  ),
  "typography.longform": (
    default: (
      "font-family": (var(--typography-longform-font-family)),
      "font-size": (var(--typography-longform-font-size)),
      "font-weight": (var(--typography-longform-font-weight)),
      "letter-spacing": (var(--typography-longform-letter-spacing)),
      "line-height": (var(--typography-longform-line-height)),
    ),
  ),
  "typography.heading": (
    default: (
      "font-family": (var(--typography-heading-font-family)),
      "font-size": (var(--typography-heading-font-size)),
      "font-weight": (var(--typography-heading-font-weight)),
      "line-height": (var(--typography-heading-line-height)),
    ),
  ),
);

@function token($tokenName, $modeName: default) {
  @if map.has-key($__token-values, $tokenName) == false {
    @error "No token named \"#{$tokenName}\"";
  }
  $_token: map.get($__token-values, $tokenName);
  @if map.has-key($_token, "__cobalt-error") {
    @error map.get($_token, "__cobalt-error");
  }
  @if map.has-key($_token, $modeName) {
    @return map.get($_token, $modeName);
  } @else {
    @return map.get($_token, default);
  }
}

@function listModes($tokenName) {
  @if map.has-key($__token-values, $tokenName) == false {
    @error "No token named \"#{$tokenName}\"";
  }
  $_modes: ();
  @each $k in map.get($__token-values, $tokenName) {
    @if $k != "default" {
      $_modes: list.append($_modes, $k);
    }
  }
  @return $_modes;
}

@mixin typography($tokenName, $modeName: default) {
  @if map.has-key($__token-typography-mixins, $tokenName) == false {
    @error "No typography mixin named \"#{$tokenName}\"";
  }
  $_mixin: map.get($__token-typography-mixins, $tokenName);
  $_properties: map.get($_mixin, default);
  @if map.has-key($_mixin, $modeName) {
    $_properties: map.get($_mixin, $modeName);
  }
  @each $_property, $_value in $_properties {
    #{$_property}: #{$_value};
  }
}
