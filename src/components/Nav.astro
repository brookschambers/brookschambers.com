<div id="portfolio-start"></div>

<nav id="nav" class="nav">
	<ul id="nav-inner" class="nav-inner">
		<li class="nav-item">
			<a id="mode-nav-link" class="nav-link nav-link--mode" href="#mode">Mode</a>
		</li>
		<li class="nav-item">
			<a id="loom-nav-link" class="nav-link nav-link--loom" href="#loom">Loom</a>
		</li>
		<li class="nav-item">
			<a id="intercom-nav-link" class="nav-link nav-link--intercom" href="#intercom">Intercom</a>
		</li>
		<li class="nav-item">
			<a id="personal-nav-link" class="nav-link nav-link--personal" href="#personal">&amp; More</a>
		</li>
	</ul>
</nav>

<script>
	import BezierEasing from 'bezier-easing';

	const nav = document.getElementById('nav')!;
	const navLinks = nav.querySelectorAll('.nav-link');
	const cubicInOut = BezierEasing(0.65, 0, 0.35, 1);

	let thresholds: [string, number][] = [];
	let lastActiveItem: string | undefined = undefined;

	function calculateThresholds() {
		const nextThresholds: typeof thresholds = [];
		for (const t of ['mode', 'loom', 'intercom', 'personal']) {
			nextThresholds.push([t, document.getElementById(t)!.getBoundingClientRect().top + scrollY - nav.getBoundingClientRect().height]);
		}
		thresholds = nextThresholds;
	}
	calculateThresholds(); // fire once on load

	function highlight(id?: string) {
		if (id === lastActiveItem) return; // important: this check is why it’s performant—we don’t do any work or touch the DOM if nothing changed
		let foundId = false;

		let activeX = 0;
		let activeWidth = 0;
		let maxWidth = 0;
		for (const link of navLinks) {
			if (id && link.id === `${id}-nav-link`) {
				// color
				link.setAttribute('aria-step', 'current');
				lastActiveItem = id;
				foundId = true;

				// calculate widths
				activeX = maxWidth; // note: don’t use `x` beacuse this might be mid-animation; `width` will always be absolute
				activeWidth = link.getBoundingClientRect().width;
				maxWidth += activeWidth;
			} else {
				link.removeAttribute('aria-step');
				maxWidth += link.getBoundingClientRect().width;
			}
		}

		// animate active item
		if (foundId) {
			// don’t scroll too far left (Math.min) or too far right (Math.max) such that there’s whitespace on either side of the nav
			const nextX = Math.max(Math.min(-activeX + (0.5 * (window.innerWidth - activeWidth)), 0), -maxWidth + window.innerWidth);
			nav.style.setProperty('--x', `${nextX}px`);
			history.replaceState({}, '', `#${id}`);
		}
		// or reset to 0
		else {
			lastActiveItem = undefined;
			nav.style.setProperty('--x', '0px');
			history.replaceState({}, '', '#');
		}
	}

	function handleScroll() {
		let activeItem: string | undefined = undefined;
		for (const [id, threshold] of thresholds) {
			if (scrollY >= threshold) {
				activeItem = id;
			} else {
				break;
			}
		}
		highlight(activeItem)
	}
	handleScroll(); // fire once on load

	addEventListener('scroll', handleScroll);
	addEventListener('resize', calculateThresholds);

	// click nav
	for (const link of navLinks) {
		link.addEventListener('click', (evt) => {
			evt.preventDefault();
			calculateThresholds();
			scrollTo(Math.ceil(thresholds.find(([id]) => `${id}-nav-link` === link.id)![1]) + 1);
		});
	}

	function scrollTo(y: number) {
		let start: number | undefined;
		const from = scrollY;
		const delta = y - from;
		const duration = Math.min(Math.max(Math.abs(delta) / 5, 250), 1500);

		function scrollInner(t: number) {
			if (!start) start = t;
			const nextY = from + (delta * cubicInOut((t - start) / duration));
			console.log(nextY);
			window.scrollTo({ top: nextY });
			if ((t - start) <= duration) {
				requestAnimationFrame(scrollInner);
			}
		}
		requestAnimationFrame(scrollInner);
	}
</script>

<style lang="scss">
	@use '../tokens' as *;

	.nav {
		background: token('color.brands.tan');
		display: flex;
		font-family: token('typography.family.heading');
		font-weight: 300;
		font-size: 11.5vw;
		letter-spacing: -0.03125em;
		list-style: none;
		overflow-x: auto; // on mobile, allow scroll
		overflow-y: hidden;
		position: sticky;
		text-transform: uppercase;
		top: 0;
		user-select: none;
		transform: translate3d(0, 0, 0);
		z-index: 100;

		@media (min-width: 600px) {
			font-size: 10vw;
			overflow-x: hidden;
		};

		// never put padding on overflow container; put within
		&-inner {
			display: flex;
			list-style: none;
			margin: 0;
			padding-left: 1rem;
			padding-right: 1rem;
			transform: translate3d(var(--x), 0, 0);
			transition: transform 750ms cubic-bezier(0.65, 0, 0.35, 1);
		}

		&-link {
			padding-right: 0.25em;
			text-decoration: none;
			transition: color token('transition.linear-quick');
			white-space: nowrap;

			&--mode {
				&:hover,
				&[aria-step='current'] {
					color: token('color.mode-green');
				}
			}

			&--loom {
				&:hover,
				&[aria-step='current'] {
					color: token('color.loom-purple');
				}
			}

			&--intercom {
				&:hover,
				&[aria-step='current'] {
					color: token('color.intercom-blue');
				}
			}

			&--personal {
				&:hover,
				&[aria-step='current'] {
					color: token('color.brands.pink');
				}
			}
		}
	}
</style>
